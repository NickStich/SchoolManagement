{
	"info": {
		"_postman_id": "8daf9343-6003-4f96-845d-4dc5d073283b",
		"name": "School Management",
		"description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple [Javascript code](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/). You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\" or the by using the [Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/).\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"266\" height=\"103\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## üí°Related templates\n\n[Regression testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)  \n[Performance testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=3302192d-87dd-4612-b381-61894de21203&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)  \n[Contract testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=42247877-8529-429d-acba-4de20c3b5b3b&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)  \n[Conditional workflow](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)  \n[Mock data generation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=da8ceebc-d4da-478c-ab8a-37634faefc74&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)  \n[Common API vulnerabilities check](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e1edbae8-6429-453d-890e-00385eea1811&sourceTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27659191"
	},
	"item": [
		{
			"name": "Students",
			"item": [
				{
					"name": "Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Id of created student",
									"var data = pm.response.json();",
									"pm.environment.set(\"studentId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Grade\": 1,\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Smith\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/student",
							"host": [
								"{{url}}"
							],
							"path": [
								"student"
							]
						},
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Get student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/student/{{studentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"student",
								"{{studentId}}"
							]
						},
						"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the¬†`token`¬†collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/student",
							"host": [
								"{{url}}"
							],
							"path": [
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Id\": {{studentId}},\n  \"Grade\": 2,\n  \"FirstName\": \"Adam\",\n  \"LastName\": \"Straford\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/student/{{studentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"student",
								"{{studentId}}"
							]
						},
						"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/student/{{studentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"student",
								"{{studentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Profile Picture",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "selectedProfilePicture",
									"type": "file",
									"src": "/C:/Users/nicolae.stici/Downloads/hierarchy.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/student/uploadProfilePicture/{{studentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"student",
								"uploadProfilePicture",
								"{{studentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Marks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/student/{{studentId}}/marks",
							"host": [
								"{{url}}"
							],
							"path": [
								"student",
								"{{studentId}}",
								"marks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teacher",
			"item": [
				{
					"name": "Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Id of created student",
									"var data = pm.response.json();",
									"// console.log(data)",
									"pm.environment.set(\"teacherId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Smith\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/Teacher",
							"host": [
								"{{url}}"
							],
							"path": [
								"Teacher"
							]
						},
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Get teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/teacher/{{teacherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"teacher",
								"{{teacherId}}"
							]
						},
						"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the¬†`token`¬†collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/teacher",
							"host": [
								"{{url}}"
							],
							"path": [
								"teacher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Id\": {{teacherId}},\n  \"FirstName\": \"Adam\",\n  \"LastName\": \"Straford\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/teacher/{{teacherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"teacher",
								"{{teacherId}}"
							]
						},
						"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/teacher/{{teacherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"teacher",
								"{{teacherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Profile Picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "selectedProfilePicture",
									"type": "file",
									"src": "/C:/Users/nicolae.stici/Downloads/girl-3316342_1920.jpg"
								}
							]
						},
						"url": {
							"raw": "{{url}}/teacher/uploadProfilePicture/{{teacherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"teacher",
								"uploadProfilePicture",
								"{{teacherId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "Get by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/file/hierarchy.png",
							"host": [
								"{{url}}"
							],
							"path": [
								"file",
								"hierarchy.png"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subject",
			"item": [
				{
					"name": "Subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Id of created student",
									"var data = pm.response.json();",
									"pm.environment.set(\"subjectId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Mathematics\",\r\n  \"teacherId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subject",
							"host": [
								"{{url}}"
							],
							"path": [
								"subject"
							]
						},
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Get subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subject/{{subjectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"subject",
								"{{subjectId}}"
							]
						},
						"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the¬†`token`¬†collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
					},
					"response": []
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/subject",
							"host": [
								"{{url}}"
							],
							"path": [
								"subject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code",
									"pm.test(\"Check the response code status\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Id\": {{subjectId}},\n  \"name\": \"English\",\n  \"teacherId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/subject/{{subjectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"subject",
								"{{subjectId}}"
							]
						},
						"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/subject/{{subjectId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"subject",
								"{{subjectId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "School",
			"item": [
				{
					"name": "Link Subjects to Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentId\": {{studentId}},\r\n  \"subjectIds\": [1, {{subjectId}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/school/linkSubjectsToStudent",
							"host": [
								"{{url}}"
							],
							"path": [
								"school",
								"linkSubjectsToStudent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlink Subject from Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentId\": {{studentId}},\r\n  \"subjectId\":  {{subjectId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/school/unlinkSubjectFromStudent",
							"host": [
								"{{url}}"
							],
							"path": [
								"school",
								"unlinkSubjectFromStudent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Mark for Student for Subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentId\": {{studentId}},\r\n  \"subjectId\":  1,\r\n  \"value\": 7,\r\n  \"date\": \"2024-01-10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/school/addMarkForStudentSubject",
							"host": [
								"{{url}}"
							],
							"path": [
								"school",
								"addMarkForStudentSubject"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Marks between Two Dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response status code\r",
									"pm.test(\"Check the response code status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"studentId\": {{studentId}},\r\n  \"subjectId\":  1,\r\n  \"value\": 7,\r\n  \"date\": \"2024-01-10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/school/getMarksBetweenDates?startDate=2024-01-07&endDate=2024-01-11&studentId={{studentId}}&subjectId=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"school",
								"getMarksBetweenDates"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-07"
								},
								{
									"key": "endDate",
									"value": "2024-01-11"
								},
								{
									"key": "studentId",
									"value": "{{studentId}}"
								},
								{
									"key": "subjectId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Mark",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"markId\": 1,\r\n    \"newValue\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/school/updateMark",
							"host": [
								"{{url}}"
							],
							"path": [
								"school",
								"updateMark"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://postman-integration-testing.glitch.me/"
		}
	]
}